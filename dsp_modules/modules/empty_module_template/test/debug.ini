/* keil debuger only support scalar variable types. Structures, arrays, and pointers are not allowed. */

/* rom2 data */
/* include "module_test.in" */

/* The filenames must be the same as in filenames.h */
/* add the file names manually or include the file generated with keil_dbg_filenames() */
include "mod_openfile.ini"

func void CloseFile(int _fileId) {
    switch(_fileId&7) {
        case 0: exec("ITMLOG 8 OFF"); break;
        case 1: exec("ITMLOG 1 OFF"); break;
        case 2: exec("ITMLOG 2 OFF"); break;
        case 3: exec("ITMLOG 3 OFF"); break;
        case 4: exec("ITMLOG 4 OFF"); break;
        case 5: exec("ITMLOG 5 OFF"); break;
        case 6: exec("ITMLOG 6 OFF"); break;
        case 7: exec("ITMLOG 7 OFF"); break;
    }
}

signal void WaitEvent(unsigned long _event, unsigned long _eventData) {
    unsigned char eventNo;
    unsigned int eventData, fileId, fileState;
    unsigned int time;
    for(;;) {
        wwatch (_event);
        eventNo = _RBYTE(_event);
        eventData = _RDWORD(_eventData);
        switch(eventNo) {
            case 1:
                break;
            case 8:
                /* */
                exec("LOG >module_test_pa.log");
                execf("%s\n", "PA");
                /* print the timers */
                printf("\n\nInternal timers:\n");
                time = _RDWORD(&timer_emt_apply);
                printf("timer empty_module_template_apply: %i.%02i ms\n",time/100, time%100);
                exec("LOG OFF");
                break;
            case 9:
                fileId = eventData&255;
                CloseFile(fileId);
                break;
            case 10:
                fileId = eventData&255;
                fileState = (eventData>>8)&255;
                OpenFile(fileId, fileState);
                break;
            case 255: /* EXIT */
                if (eventData != 0) {
                    exec("LOG >module_test_pa.log");
                    printf("Failure.... Exit code %i\n",eventData);
                    exec("LOG OFF");
                }
                execf("%s\n", "EXIT");
                break;
            default:
                printf ("signaled eventNo = %i, eventData = 0x%08X\n", eventNo, eventData);
                break;
        }
    }
}

WaitEvent(&__globalEvent, &__globalEventData)

